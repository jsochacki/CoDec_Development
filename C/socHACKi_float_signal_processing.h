/******************************************************************************/
#ifndef SOCHACKI_SP

#define SOCHACKI_SP
/******************************************************************************/
#include "socHACKi_types.h"// Do overloading// initialize_ramp#define initialize_ramp(x, length_x)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), int*),\                    initialize_ramp_int(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), short*),\                    initialize_ramp_short(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), long*),\                    initialize_ramp_long(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), float*),\                    initialize_ramp_float(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), double*),\                    initialize_ramp_double(x, length_x),\                    (void)0)))));// swap_vectors#define swap_vectors(x, length_x, y, length_y)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), int**),\                    swap_vectors_int(x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), short**),\                    swap_vectors_short(x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), long**),\                    swap_vectors_long(x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), float**),\                    swap_vectors_float(x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), double**),\                    swap_vectors_double(x, length_x, y, length_y),\                    (void)0)))));// swap#define swap_vectors(a, b)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), int*),\                    swap_int(a, b),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), short*),\                    swap_short(a, b),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), long*),\                    swap_long(a, b),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), float*),\                    swap_float(a, b),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), double*),\                    swap_double(a, b),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(a), double*),\                    swap_uint(a, b),\                    (void)0))))));// zero_pad_fb#define zero_pad_fb(result, x, length_x, PAD_SIZE)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), int*),\                    zero_pad_fb_int(result, x, length_x, PAD_SIZE),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), short*),\                    zero_pad_fb_short(result, x, length_x, PAD_SIZE),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), long*),\                    zero_pad_fb_long(result, x, length_x, PAD_SIZE),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), float*),\                    zero_pad_fb_float(result, x, length_x, PAD_SIZE),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), double*),\                    zero_pad_fb_double(result, x, length_x, PAD_SIZE),\                    (void)0)))));// flip_vector#define flip_vector(x, length_x)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), int*),\                    flip_vector_int(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), short*),\                    flip_vector_short(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), long*),\                    flip_vector_long(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), float*),\                    flip_vector_float(x, length_x),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), double*),\                    flip_vector_double(x, length_x),\                    (void)0)))));// conv_int#define conv(result, x, length_x, y, length_y)\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), int**),\                    conv_int(result, x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), short**),\                    conv_short(result, x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), long**),\                    conv_long(result, x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), float**),\                    conv_float(result, x, length_x, y, length_y),\    __builtin_choose_expr(__builtin_types_compatible_p(typeof(x), double**),\                    conv_double(result, x, length_x, y, length_y),\                    (void)0)))));// initialize_rampvoid initialize_ramp_int(int *x, UINT length_x);void initialize_ramp_short(short *x, UINT length_x);void initialize_ramp_long(long *x, UINT length_x);void initialize_ramp_float(float *x, UINT length_x);void initialize_ramp_double(double *x, UINT length_x);// swap_vectorsvoid swap_vectors_int(int **x, UINT *length_x, int **y, UINT *length_y);void swap_vectors_short(short **x, UINT *length_x, short **y, UINT *length_y);void swap_vectors_long(long **x, UINT *length_x, long **y, UINT *length_y);void swap_vectors_float(float **x, UINT *length_x, float **y, UINT *length_y);void swap_vectors_double(double **x, UINT *length_x, double **y, UINT *length_y);// swapvoid swap_int(int *a, int *b);void swap_short(short *a, short *b);void swap_long(long *a, long *b);void swap_float(float *a, float *b);void swap_double(double *a, double *b);void swap_uint(UINT *a, UINT *b);// zero_pad_fbUINT zero_pad_fb_int(int **result, int *x, UINT length_x, UINT PAD_SIZE);UINT zero_pad_fb_short(short **result, short *x, UINT length_x, UINT PAD_SIZE);UINT zero_pad_fb_long(long **result, long *x, UINT length_x, UINT PAD_SIZE);UINT zero_pad_fb_float(float **result, float *x, UINT length_x, UINT PAD_SIZE);UINT zero_pad_fb_double(double **result, double *x, UINT length_x, UINT PAD_SIZE);// flip_vectorvoid flip_vector_int(int *x, UINT length_x);void flip_vector_short(short *x, UINT length_x);void flip_vector_long(long *x, UINT length_x);void flip_vector_float(float *x, UINT length_x);void flip_vector_double(double *x, UINT length_x);// convUINT conv_int(int **result, int **x, UINT length_x, int **y, UINT length_y);UINT conv_short(short **result, short **x, UINT length_x, short **y, UINT length_y);UINT conv_long(long **result, long **x, UINT length_x, long **y, UINT length_y);UINT conv_float(float **result, float **x, UINT length_x, float **y, UINT length_y);UINT conv_double(double **result, double **x, UINT length_x, double **y, UINT length_y);

#endif // SOCHACKI_SP
