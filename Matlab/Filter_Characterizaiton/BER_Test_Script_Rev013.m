clear all

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This Rev of the script does BER calculations for the SRRC filter using
%%% the standard signal processing chain and is used for C code
%%% troubleshooting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

REFERENCEEBNO = 0:0.1:9;
REFERENCEBER = berawgn(REFERENCEEBNO, 'psk', M, 'nondiff');

data_path = 'C:\Users\jsochacki\Desktop\';
qpsk_data_file = 'qpskdata.txt';
noise_data_file = 'noisefile.txt';
binary_source_data_file = 'encodedbits.txt';

qpsk_data = csvread(fullfile(data_path, qpsk_data_file));
noise_data = csvread(fullfile(data_path, noise_data_file));
binary_source_data = csvread(fullfile(data_path, binary_source_data_file));

if(length(binary_source_data) ~= 64800)
    error('InputFile:incorrectSize',...
          ['load new file set.\nYour current files weren''t ' ...
           'fully written before you grabbed them\n']);
end

qpsk_data = qpsk_data(:,1) + j*qpsk_data(:,2);
noise_data = noise_data(:,1) + j*noise_data(:,2);

NumberOfSymbols = length(binary_source_data);
%MODCOD Settings
MODCOD = 1;

[Complex_Alphabet, ...
 Binary_Alphabet, ...
 Decimal_Alphabet, ...
 BITS_PER_WORD] ...
     = dvbs2_Constellations(MODCOD);

BITCOUNT = NumberOfSymbols / BITS_PER_WORD;

EbN0_dB = 9;
desired_sum_squared_power = 1;

[binary_word_stream] = binary_stream_to_binary_word_stream2( ...
                          binary_source_data, ...
                          BITS_PER_WORD);

[symbol_stream] = ...
    one_to_one_mapper2(binary_word_stream, ...
                       Binary_Alphabet, ...
                       Complex_Alphabet);

symbol_stream = ...
    AGC(symbol_stream, ...
        desired_sum_squared_power);

%Add noise the old way (the matlab only way)
EbNo = power(10, EbN0_dB / 10);
SNR = EbNo*BITS_PER_WORD;
mssp = (1 / length(symbol_stream)) * (sum(symbol_stream .* conj(symbol_stream)));
N0 = mssp / SNR;
sigma = sqrt(N0/2);
Addative_White_Gaussian_Noise = ...
    sigma*randn(size(symbol_stream,1), 1) + i*sigma*randn(size(symbol_stream,1), 1);

symbol_stream_with_noise = ...
    symbol_stream + Addative_White_Gaussian_Noise;

symbol_stream_with_c_noise = ...
    symbol_stream + noise_data;

symbol_stream_with_noise = ...
    AGC(symbol_stream_with_noise, ...
        desired_sum_squared_power);

symbol_stream_with_c_noise = ...
    AGC(symbol_stream_with_c_noise, ...
        desired_sum_squared_power);

qpsk_data = ...
    AGC(qpsk_data, ...
        desired_sum_squared_power);

figure(1)
plot(qpsk_data, 'ro')
hold on
plot(symbol_stream_with_c_noise, 'bo')
plot(symbol_stream_with_noise, 'ko')

if(sum(qpsk_data - symbol_stream_with_c_noise) > 1e-3)
   error('data isn''identical') 
end

[decoded_complex_stream] = ...
        AWGN_maximum_likelyhood_hard_decision_decoder( ...
            symbol_stream_with_noise, ...
            Complex_Alphabet, ...
            Complex_Alphabet);

[cnoise_decoded_complex_stream] = ...
        AWGN_maximum_likelyhood_hard_decision_decoder( ...
            symbol_stream_with_c_noise, ...
            Complex_Alphabet, ...
            Complex_Alphabet);

[cdata_decoded_complex_c_stream] = ...
        AWGN_maximum_likelyhood_hard_decision_decoder( ...
            qpsk_data, ...
            Complex_Alphabet, ...
            Complex_Alphabet);

[received_binary_word_stream] = ...
    one_to_one_mapper2(decoded_complex_stream, ...
                       Complex_Alphabet, ...
                       Binary_Alphabet);

[cnoise_received_binary_word_stream] = ...
    one_to_one_mapper2(cnoise_decoded_complex_stream, ...
                       Complex_Alphabet, ...
                       Binary_Alphabet);

[cdata_received_binary_word_stream] = ...
    one_to_one_mapper2(cdata_decoded_complex_c_stream, ...
                       Complex_Alphabet, ...
                       Binary_Alphabet);

[received_binary_stream] = ...
    binary_word_stream_to_binary_stream( ...
        received_binary_word_stream, ...
        BITS_PER_WORD);

[cnoise_received_binary_stream] = ...
    binary_word_stream_to_binary_stream( ...
        cnoise_received_binary_word_stream, ...
        BITS_PER_WORD);

[cdata_received_binary_stream] = ...
    binary_word_stream_to_binary_stream( ...
        cdata_received_binary_word_stream, ...
        BITS_PER_WORD);


MATLAB_ERRORS = ...
          (NumberOfSymbols - ...
           sum(binary_source_data == received_binary_stream));

CNOISE_ERRORS = ...
          (NumberOfSymbols - ...
           sum(binary_source_data == cnoise_received_binary_stream));

CDATA_ERRORS = ...
          (NumberOfSymbols - ...
           sum(binary_source_data == cdata_received_binary_stream));

MATLAB_BER = MATLAB_ERRORS / BITCOUNT;
CNOISE_BER = CNOISE_ERRORS / BITCOUNT;
CDATA_BER = CDATA_ERRORS / BITCOUNT;

matlab_BER = berawgn(EbN0_dB, 'psk', power(2, BITS_PER_WORD), 'nondiff');

figure(1)
hold on
grid on
grid minor
legend_data = [];
LS = {'none';'-';'-.';':';':';':';':';':';':'};
MS = {'o';'none';'-.';':';':';':';':';':';':'};
plot(EbNo_vec,BER,'LineWidth',1,'LineStyle',LS{1},'Marker','o')
legend_data{1} = 'Simulation';
plot(EbNo_vec,matlab_BER,'LineWidth',2,'LineStyle',LS{2})
legend_data{2} = 'Analytic';
title('QPSK Bit Error Rate Over Stationary AWGN Channel');
xlabel('Eb/No (dB)')
ylabel('BER')

legend(legend_data)
ax = gca;
ax.YScale = 'log';
ax.XTickMode = 'manual'
ax.XMinorTick = 'on'
axis([min(EbNo_vec) max(EbNo_vec) 1e-6 1e-1])

save('Results\BER_Test_Script_Rev003_Results.mat', ...
     'EbNo_vec', ...
     'BITS_PER_WORD', ...
     'BER')