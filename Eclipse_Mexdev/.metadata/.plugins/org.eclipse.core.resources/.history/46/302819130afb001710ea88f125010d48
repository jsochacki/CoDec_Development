#include <stdio.h>
#include <stdlib.h>
#include "mex.h"

void print_real_matrix(double *matrix, mwSize M, mwSize N);

void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{

    printf("nrhs is %d\n", nrhs);
    printf("nlhs is %d\n", nlhs);
    printf("M (rows) of argument 1 is %d\n", mxGetM(prhs[0]));
    printf("N (columns) of argument 1 is %d\n", mxGetN(prhs[0]));
    printf("M (rows) of argument 2 is %d\n", mxGetM(prhs[1]));
    printf("N (columns) of argument 2 is %d\n", mxGetN(prhs[1]));
    printf("M (rows) of argument 3 is %d\n", mxGetM(prhs[2]));
    printf("N (columns) of argument 3 is %d\n", mxGetN(prhs[2]));

    double *a1, *a2, *a3;
    a1 = mxGetPr(prhs[0]);
    a2 = mxGetPr(prhs[1]);
    a3 = mxGetPr(prhs[2]);

    double *temper;
    *temper = a1[0];
    printf("temper is =%f\n", *temper);
    *temper = a1[1];
    printf("temper is =%f\n", *temper);

    print_real_matrix(a1, mxGetM(prhs[0]), mxGetN(prhs[0]));
}

void print_real_matrix(double *matrix, mwSize M, mwSize N)
{
    mwIndex n = 0;
    mwIndex m = 0;
    double *temper;
    printf("temper is =%f\n", *matrix);
    *temper = matrix[0];
    printf("temper is =%f\n", *temper);
    printf("temper is =%f\n", *temper);

    for(m = 0; m < M; m++)
    {
        printf("[ ");
        for(n = 0; n < N; n++)
        {
            printf("temper is =%f\n", *temper);
            //printf("%f ", matrix[m + (n * M)]);
            //printf("m=%d n=%d\n", m ,n);
        }
        printf("]\n");
    }
}
